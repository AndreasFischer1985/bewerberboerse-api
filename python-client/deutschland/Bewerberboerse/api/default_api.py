"""
    Arbeitsagentur Bewerberbörse API

     Eine der größten Datenbanken für Bewerbende in Deutschland durchsuchen.   Die Authentifizierung funktioniert per OAuth 2 Client Credentials mit JWTs. Folgende Client-Credentials können dafür verwendet werden:  **ClientID:** 919b0af7-6e5f-4542-a7f5-04268b8bae2e  **ClientSecret:** 93fce94c-5be2-4dc8-b040-c62818a4b003  **Achtung**: der generierte Token muss bei folgenden GET-requests an https://rest.arbeitsagentur.de/jobboerse/bewerbersuche-service/pc/v1/bewerber im header als 'OAuthAccessToken' inkludiert werden.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: andreasfischer1985@web.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.Bewerberboerse.api_client import ApiClient
from deutschland.Bewerberboerse.api_client import Endpoint as _Endpoint
from deutschland.Bewerberboerse.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.bewerberboerse_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": [],
                "endpoint_path": "/pc/v1/bewerber",
                "operation_id": "bewerberboerse",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "was",
                    "ausbildungsart",
                    "wo",
                    "umkreis",
                    "angebotsart",
                    "arbeitszeit",
                    "berufserfahrung",
                    "vertragsart",
                    "behinderung",
                    "page",
                    "size",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "ausbildungsart",
                    "umkreis",
                    "angebotsart",
                    "arbeitszeit",
                    "berufserfahrung",
                    "vertragsart",
                    "behinderung",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("ausbildungsart",): {"AU": "au", "DSA": "dsa", "DSP": "dsp"},
                    ("umkreis",): {
                        "0": 0,
                        "10": 10,
                        "15": 15,
                        "20": 20,
                        "50": 50,
                        "100": 100,
                        "200": 200,
                    },
                    ("angebotsart",): {"AR": "ar", "AU": "au", "PT": "pt", "SE": "se"},
                    ("arbeitszeit",): {"VZ": "vz", "TZ": "tz", "SNW": "snw"},
                    ("berufserfahrung",): {"BE": "be", "MB": "mb"},
                    ("vertragsart",): {"BE": "be", "UB": "ub"},
                    ("behinderung",): {"AN": "an"},
                },
                "openapi_types": {
                    "was": (str,),
                    "ausbildungsart": (str,),
                    "wo": (str,),
                    "umkreis": (int,),
                    "angebotsart": (str,),
                    "arbeitszeit": (str,),
                    "berufserfahrung": (str,),
                    "vertragsart": (str,),
                    "behinderung": (str,),
                    "page": (int,),
                    "size": (int,),
                },
                "attribute_map": {
                    "was": "was",
                    "ausbildungsart": "ausbildungsart",
                    "wo": "wo",
                    "umkreis": "umkreis",
                    "angebotsart": "angebotsart",
                    "arbeitszeit": "arbeitszeit",
                    "berufserfahrung": "berufserfahrung",
                    "vertragsart": "vertragsart",
                    "behinderung": "behinderung",
                    "page": "page",
                    "size": "size",
                },
                "location_map": {
                    "was": "query",
                    "ausbildungsart": "query",
                    "wo": "query",
                    "umkreis": "query",
                    "angebotsart": "query",
                    "arbeitszeit": "query",
                    "berufserfahrung": "query",
                    "vertragsart": "query",
                    "behinderung": "query",
                    "page": "query",
                    "size": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.bewerberdetails_endpoint = _Endpoint(
            settings={
                "response_type": (
                    {
                        str: (
                            bool,
                            date,
                            datetime,
                            dict,
                            float,
                            int,
                            list,
                            str,
                            none_type,
                        )
                    },
                ),
                "auth": [],
                "endpoint_path": "/pc/v1/bewerberdetails/{referenznummer}",
                "operation_id": "bewerberdetails",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "referenznummer",
                ],
                "required": [
                    "referenznummer",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "referenznummer": (str,),
                },
                "attribute_map": {
                    "referenznummer": "referenznummer",
                },
                "location_map": {
                    "referenznummer": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def bewerberboerse(self, **kwargs):
        """Bewerberbörse  # noqa: E501

        Die Bewerberbörse ermöglicht es, Bewerber*innen mit verschiedenen GET-Parametern zu filtern.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bewerberboerse(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            was (str): Beruf, Kenntnisse, Sprachen, etc.. [optional]
            ausbildungsart (str): Ausbildungsart - au=Ausbildung, dsa=Duales Studium (ausbildungsintegrierend), dsp=Duales Studium (praxisintegrierend).. [optional]
            wo (str): Ort, PLZ, Bundesland, Land, etc.. [optional]
            umkreis (int): Umkreis - 0=ganzer Ort; 10=10km; 15=15km; 20=20km; 50=50km; 100=100km; 200=200km.. [optional]
            angebotsart (str): Angebotsart - ar=Arbeitskräfte; au=Auszubildende/Duales Studium; pt=Praktikanten/Trainees; se=Selbstständige.. [optional]
            arbeitszeit (str): Arbeitszeit - vz=Vollzeit; tz=Teilzeit; snw=Schicht,Nacht,Wochenende; ht=Heim-/Telearbeit; mj=Minijob.. [optional]
            berufserfahrung (str): Berufserfahrung - be=Berufseinsteiger*innen; mb=Mit Berufserfahrung.. [optional]
            vertragsart (str): Vertragsart - be=Befristet; ub=Unbefristet.. [optional]
            behinderung (str): Behinderung - an=Nur Schwerbehinderte oder ihnen gleichgestellte Bewerber*innen anzeigen.. [optional] if omitted the server will use the default value of "an"
            page (int): Ergebnissseite. [optional]
            size (int): Anzahl von Ergebnissen. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.bewerberboerse_endpoint.call_with_http_info(**kwargs)

    def bewerberdetails(self, referenznummer, **kwargs):
        """bewerberdetails  # noqa: E501

        Details zu einzelnen Bewerbenden lassen sich unter Angabe der Referenznummer (z.B. 10005-955011998040991647-B) abfragen  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bewerberdetails(referenznummer, async_req=True)
        >>> result = thread.get()

        Args:
            referenznummer (str): Referenznummer

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["referenznummer"] = referenznummer
        return self.bewerberdetails_endpoint.call_with_http_info(**kwargs)
